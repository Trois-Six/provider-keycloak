// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ClientTimePolicyInitParameters struct {
	DayMonth *string `json:"dayMonth,omitempty" tf:"day_month,omitempty"`

	DayMonthEnd *string `json:"dayMonthEnd,omitempty" tf:"day_month_end,omitempty"`

	DecisionStrategy *string `json:"decisionStrategy,omitempty" tf:"decision_strategy,omitempty"`

	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	Hour *string `json:"hour,omitempty" tf:"hour,omitempty"`

	HourEnd *string `json:"hourEnd,omitempty" tf:"hour_end,omitempty"`

	Logic *string `json:"logic,omitempty" tf:"logic,omitempty"`

	Minute *string `json:"minute,omitempty" tf:"minute,omitempty"`

	MinuteEnd *string `json:"minuteEnd,omitempty" tf:"minute_end,omitempty"`

	Month *string `json:"month,omitempty" tf:"month,omitempty"`

	MonthEnd *string `json:"monthEnd,omitempty" tf:"month_end,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	NotBefore *string `json:"notBefore,omitempty" tf:"not_before,omitempty"`

	NotOnOrAfter *string `json:"notOnOrAfter,omitempty" tf:"not_on_or_after,omitempty"`

	// +crossplane:generate:reference:type=github.com/trois-six/provider-keycloak/apis/keycloak/v1alpha1.Realm
	RealmID *string `json:"realmId,omitempty" tf:"realm_id,omitempty"`

	// Reference to a Realm in keycloak to populate realmId.
	// +kubebuilder:validation:Optional
	RealmIDRef *v1.Reference `json:"realmIdRef,omitempty" tf:"-"`

	// Selector for a Realm in keycloak to populate realmId.
	// +kubebuilder:validation:Optional
	RealmIDSelector *v1.Selector `json:"realmIdSelector,omitempty" tf:"-"`

	ResourceServerID *string `json:"resourceServerId,omitempty" tf:"resource_server_id,omitempty"`

	Year *string `json:"year,omitempty" tf:"year,omitempty"`

	YearEnd *string `json:"yearEnd,omitempty" tf:"year_end,omitempty"`
}

type ClientTimePolicyObservation struct {
	DayMonth *string `json:"dayMonth,omitempty" tf:"day_month,omitempty"`

	DayMonthEnd *string `json:"dayMonthEnd,omitempty" tf:"day_month_end,omitempty"`

	DecisionStrategy *string `json:"decisionStrategy,omitempty" tf:"decision_strategy,omitempty"`

	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	Hour *string `json:"hour,omitempty" tf:"hour,omitempty"`

	HourEnd *string `json:"hourEnd,omitempty" tf:"hour_end,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Logic *string `json:"logic,omitempty" tf:"logic,omitempty"`

	Minute *string `json:"minute,omitempty" tf:"minute,omitempty"`

	MinuteEnd *string `json:"minuteEnd,omitempty" tf:"minute_end,omitempty"`

	Month *string `json:"month,omitempty" tf:"month,omitempty"`

	MonthEnd *string `json:"monthEnd,omitempty" tf:"month_end,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	NotBefore *string `json:"notBefore,omitempty" tf:"not_before,omitempty"`

	NotOnOrAfter *string `json:"notOnOrAfter,omitempty" tf:"not_on_or_after,omitempty"`

	RealmID *string `json:"realmId,omitempty" tf:"realm_id,omitempty"`

	ResourceServerID *string `json:"resourceServerId,omitempty" tf:"resource_server_id,omitempty"`

	Year *string `json:"year,omitempty" tf:"year,omitempty"`

	YearEnd *string `json:"yearEnd,omitempty" tf:"year_end,omitempty"`
}

type ClientTimePolicyParameters struct {

	// +kubebuilder:validation:Optional
	DayMonth *string `json:"dayMonth,omitempty" tf:"day_month,omitempty"`

	// +kubebuilder:validation:Optional
	DayMonthEnd *string `json:"dayMonthEnd,omitempty" tf:"day_month_end,omitempty"`

	// +kubebuilder:validation:Optional
	DecisionStrategy *string `json:"decisionStrategy,omitempty" tf:"decision_strategy,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	Hour *string `json:"hour,omitempty" tf:"hour,omitempty"`

	// +kubebuilder:validation:Optional
	HourEnd *string `json:"hourEnd,omitempty" tf:"hour_end,omitempty"`

	// +kubebuilder:validation:Optional
	Logic *string `json:"logic,omitempty" tf:"logic,omitempty"`

	// +kubebuilder:validation:Optional
	Minute *string `json:"minute,omitempty" tf:"minute,omitempty"`

	// +kubebuilder:validation:Optional
	MinuteEnd *string `json:"minuteEnd,omitempty" tf:"minute_end,omitempty"`

	// +kubebuilder:validation:Optional
	Month *string `json:"month,omitempty" tf:"month,omitempty"`

	// +kubebuilder:validation:Optional
	MonthEnd *string `json:"monthEnd,omitempty" tf:"month_end,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	NotBefore *string `json:"notBefore,omitempty" tf:"not_before,omitempty"`

	// +kubebuilder:validation:Optional
	NotOnOrAfter *string `json:"notOnOrAfter,omitempty" tf:"not_on_or_after,omitempty"`

	// +crossplane:generate:reference:type=github.com/trois-six/provider-keycloak/apis/keycloak/v1alpha1.Realm
	// +kubebuilder:validation:Optional
	RealmID *string `json:"realmId,omitempty" tf:"realm_id,omitempty"`

	// Reference to a Realm in keycloak to populate realmId.
	// +kubebuilder:validation:Optional
	RealmIDRef *v1.Reference `json:"realmIdRef,omitempty" tf:"-"`

	// Selector for a Realm in keycloak to populate realmId.
	// +kubebuilder:validation:Optional
	RealmIDSelector *v1.Selector `json:"realmIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ResourceServerID *string `json:"resourceServerId,omitempty" tf:"resource_server_id,omitempty"`

	// +kubebuilder:validation:Optional
	Year *string `json:"year,omitempty" tf:"year,omitempty"`

	// +kubebuilder:validation:Optional
	YearEnd *string `json:"yearEnd,omitempty" tf:"year_end,omitempty"`
}

// ClientTimePolicySpec defines the desired state of ClientTimePolicy
type ClientTimePolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ClientTimePolicyParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ClientTimePolicyInitParameters `json:"initProvider,omitempty"`
}

// ClientTimePolicyStatus defines the observed state of ClientTimePolicy.
type ClientTimePolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ClientTimePolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ClientTimePolicy is the Schema for the ClientTimePolicys API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,keycloak}
type ClientTimePolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.decisionStrategy) || (has(self.initProvider) && has(self.initProvider.decisionStrategy))",message="spec.forProvider.decisionStrategy is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.resourceServerId) || (has(self.initProvider) && has(self.initProvider.resourceServerId))",message="spec.forProvider.resourceServerId is a required parameter"
	Spec   ClientTimePolicySpec   `json:"spec"`
	Status ClientTimePolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ClientTimePolicyList contains a list of ClientTimePolicys
type ClientTimePolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ClientTimePolicy `json:"items"`
}

// Repository type metadata.
var (
	ClientTimePolicy_Kind             = "ClientTimePolicy"
	ClientTimePolicy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ClientTimePolicy_Kind}.String()
	ClientTimePolicy_KindAPIVersion   = ClientTimePolicy_Kind + "." + CRDGroupVersion.String()
	ClientTimePolicy_GroupVersionKind = CRDGroupVersion.WithKind(ClientTimePolicy_Kind)
)

func init() {
	SchemeBuilder.Register(&ClientTimePolicy{}, &ClientTimePolicyList{})
}
