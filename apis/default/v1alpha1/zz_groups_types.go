// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type GroupsInitParameters struct {

	// A set of group ids that should be default groups on the realm referenced by realm_id.
	// +listType=set
	GroupIds []*string `json:"groupIds,omitempty" tf:"group_ids,omitempty"`
}

type GroupsObservation struct {

	// A set of group ids that should be default groups on the realm referenced by realm_id.
	// +listType=set
	GroupIds []*string `json:"groupIds,omitempty" tf:"group_ids,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type GroupsParameters struct {

	// A set of group ids that should be default groups on the realm referenced by realm_id.
	// +kubebuilder:validation:Optional
	// +listType=set
	GroupIds []*string `json:"groupIds,omitempty" tf:"group_ids,omitempty"`
}

// GroupsSpec defines the desired state of Groups
type GroupsSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     GroupsParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider GroupsInitParameters `json:"initProvider,omitempty"`
}

// GroupsStatus defines the observed state of Groups.
type GroupsStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        GroupsObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Groups is the Schema for the Groupss API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,keycloak}
type Groups struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.groupIds) || (has(self.initProvider) && has(self.initProvider.groupIds))",message="spec.forProvider.groupIds is a required parameter"
	Spec   GroupsSpec   `json:"spec"`
	Status GroupsStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GroupsList contains a list of Groupss
type GroupsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Groups `json:"items"`
}

// Repository type metadata.
var (
	Groups_Kind             = "Groups"
	Groups_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Groups_Kind}.String()
	Groups_KindAPIVersion   = Groups_Kind + "." + CRDGroupVersion.String()
	Groups_GroupVersionKind = CRDGroupVersion.WithKind(Groups_Kind)
)

func init() {
	SchemeBuilder.Register(&Groups{}, &GroupsList{})
}
